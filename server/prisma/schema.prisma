generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model accounts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(50)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users[]
}

model candidate_job_applications {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id    BigInt   @db.UnsignedBigInt
  job_id     BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  @@index([job_id], map: "application_job_id")
  @@index([user_id], map: "job_application_user")
}

model candidate_job_likes {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt   @db.UnsignedBigInt
  job_id     BigInt   @db.UnsignedBigInt
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  @@index([user_id], map: "candidate_job_likes_user_id")
  @@index([job_id], map: "profile_job_likes_job_id")
}

model candidate_orders {
  id            Int      @id @default(autoincrement())
  user_id       BigInt   @db.UnsignedBigInt
  order_id      String   @db.VarChar(100)
  order_invoice String   @db.VarChar(100)
  order_total   String   @db.VarChar(100)
  order_contact String   @db.VarChar(100)
  status        Int
  candidates    String   @db.LongText
  plan          String   @db.LongText
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
}

model candidate_specialisms {
  id            BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  user_id       BigInt   @db.UnsignedBigInt
  specialism_id BigInt   @db.UnsignedBigInt
  specialties   String   @db.LongText
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)

  @@index([specialism_id], map: "candidate_specialisms_specialism_id")
  @@index([user_id], map: "candidate_specialisms_user_id")
}

model categories {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  account_id  Int
  user_id     Int
  name        String    @db.VarChar(255)
  slug        String    @db.VarChar(355)
  description String?   @db.LongText
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime? @default(now()) @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)
  posts       posts[]
}

model company_sizes {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  company_sizes_name String    @db.Char(255)
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
}

model company_types {
  id                 BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  company_types_name String              @db.Char(200)
  created_at         DateTime?           @db.Timestamp(0)
  updated_at         DateTime?           @db.Timestamp(0)
  employer_profiles  employer_profiles[]
}

model contacts {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  data       String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model contingency_hirings {
  id           BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  first_name   String?  @db.LongText
  last_name    String?  @db.LongText
  email        String?  @db.LongText
  phone_number String?  @db.LongText
  country      String?  @db.LongText
  company_name String?  @db.LongText
  job_title    String?  @db.LongText
  industry     String?  @db.LongText
  service      String?  @db.LongText
  message      String?  @db.LongText
  updated_at   DateTime @default(now()) @db.Timestamp(0)
  created_at   DateTime @default(now()) @db.Timestamp(0)
}

model contract_types {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  contract_types_name String    @db.VarChar(200)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model discount_codes {
  id         BigInt    @id @default(autoincrement())
  code       String    @db.Text
  percent    Float
  updated_at DateTime? @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model education_levels {
  id                    BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  experiences_id        BigInt    @default(1) @db.UnsignedBigInt
  education_levels_name String    @db.Char(200)
  created_at            DateTime? @db.Timestamp(0)
  updated_at            DateTime? @db.Timestamp(0)
}

model employer_profiles {
  id                 BigInt        @id @default(autoincrement()) @db.UnsignedBigInt
  user_id            BigInt        @db.UnsignedBigInt
  specialism_id      BigInt        @db.UnsignedBigInt
  industry_id        BigInt        @db.UnsignedBigInt
  company_type_id    BigInt        @db.UnsignedBigInt
  company_size_id    BigInt        @db.UnsignedBigInt
  company_name       String        @db.Char(200)
  tag_line           String        @db.Char(200)
  search_and_listing Boolean
  facebook           String?       @db.Text
  twitter            String?       @db.Text
  linkedin           String?       @db.Text
  website            String?       @db.Text
  email              String        @db.VarChar(200)
  phone              String        @db.VarChar(200)
  country            String        @db.VarChar(200)
  city               String        @db.VarChar(200)
  est_since          String        @db.Text
  complete_address   String?       @db.Text
  description        String        @db.Text
  created_at         DateTime?     @db.Timestamp(0)
  updated_at         DateTime?     @db.Timestamp(0)
  deleted_at         DateTime?     @db.Timestamp(0)
  company_types      company_types @relation(fields: [company_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employer_profiles_company_types_id_foreign")
  industries         industries    @relation(fields: [industry_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employer_profiles_industries_id_foreign")
  users              users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "employer_profiles_users_id_foreign")

  @@index([company_size_id], map: "employer_company_size_id")
  @@index([company_type_id], map: "employer_profiles_company_types_id_foreign")
  @@index([industry_id], map: "employer_profiles_industries_id_foreign")
  @@index([user_id], map: "employer_profiles_users_id_foreign")
  @@index([specialism_id], map: "employer_specialism")
}

model employers {
  employers_id      BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  first_name        String    @db.VarChar(200)
  last_name         String    @db.VarChar(200)
  website           String    @db.Text
  social_media      String    @db.LongText
  phone_number      String    @db.VarChar(200)
  country_code      String    @db.VarChar(200)
  email             String    @unique(map: "employers_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model experience_details {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  is_current_job      Boolean
  start_date          DateTime  @db.Date
  end_date            DateTime  @db.Date
  job_title           DateTime  @db.Date
  company_name        DateTime  @db.Date
  job_location_city   String    @db.Char(200)
  job_location_state  String    @db.Char(200)
  job_location_county String    @db.Char(200)
  country_code        String    @db.Char(200)
  description         String    @db.Char(255)
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
}

model experiences {
  id               BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  experiences_name String    @db.Char(200)
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model industries {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  industries_name   String              @db.Char(200)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  employer_profiles employer_profiles[]
}

model jobs {
  id                          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                     BigInt    @db.UnsignedBigInt
  specialism_id               BigInt    @db.UnsignedBigInt
  industry_id                 BigInt    @db.UnsignedBigInt
  contract_type_id            BigInt    @db.UnsignedBigInt
  education_level_id          BigInt    @db.UnsignedBigInt
  experience_id               BigInt    @db.UnsignedBigInt
  jobs_title                  String    @db.Text
  search_and_listing          Int       @db.TinyInt
  experience_length           String    @db.Text
  experience_level            String    @db.Text
  qualifications_competencies String    @db.LongText
  duties_responsibilities     String    @db.LongText
  offered_salary              String    @db.Text
  address                     String    @db.Text
  country                     String    @db.VarChar(200)
  city                        String    @db.VarChar(200)
  email                       String    @db.VarChar(200)
  gender                      Int
  languages                   String?   @db.LongText
  is_active                   Boolean
  jobs_description            String    @db.LongText
  created_at                  DateTime? @db.Timestamp(0)
  updated_at                  DateTime? @db.Timestamp(0)
  application_deadline        DateTime  @db.Date
  is_company_name_hidden      Boolean

  @@index([contract_type_id], map: "contract_type_id")
  @@index([education_level_id], map: "education_level_id_jobs")
  @@index([experience_id], map: "experience_id_jobs")
  @@index([industry_id], map: "industry_id_jobs")
  @@index([specialism_id], map: "specialism_id_jobs")
  @@index([user_id], map: "user_id_employer_jobs")
}

model languages {
  id             Int    @id @default(autoincrement())
  language_names String @db.VarChar(200)
}

model leads {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  phone      String    @db.VarChar(255)
  message    String    @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model media {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  model_type        String    @db.VarChar(255)
  model_id          BigInt    @db.UnsignedBigInt
  uuid              String?   @db.Char(36)
  collection_name   String    @db.VarChar(255)
  name              String    @db.VarChar(255)
  file_name         String    @db.VarChar(255)
  mime_type         String?   @db.VarChar(255)
  disk              String    @db.VarChar(255)
  conversions_disk  String?   @db.VarChar(255)
  size              BigInt    @db.UnsignedBigInt
  manipulations     String    @db.LongText
  custom_properties String    @db.LongText
  responsive_images String    @db.LongText
  order_column      Int?      @db.UnsignedInt
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)

  @@index([model_type, model_id], map: "media_model_type_model_id_index")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model model_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  model_type    String      @db.VarChar(255)
  model_id      BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_permissions_permission_id_foreign")

  @@id([permission_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_permissions_model_id_model_type_index")
}

model model_has_roles {
  role_id    BigInt @db.UnsignedBigInt
  model_type String @db.VarChar(255)
  model_id   BigInt @db.UnsignedBigInt
  roles      roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "model_has_roles_role_id_foreign")

  @@id([role_id, model_id, model_type])
  @@index([model_id, model_type], map: "model_has_roles_model_id_model_type_index")
}

model oauth_access_tokens {
  id         String    @id @db.VarChar(100)
  user_id    BigInt?   @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  name       String?   @db.VarChar(255)
  scopes     String?   @db.Text
  revoked    Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_access_tokens_user_id_index")
}

model oauth_auth_codes {
  id         String    @id @db.VarChar(100)
  user_id    BigInt    @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  scopes     String?   @db.Text
  revoked    Boolean
  expires_at DateTime? @db.DateTime(0)

  @@index([user_id], map: "oauth_auth_codes_user_id_index")
}

model oauth_clients {
  id                     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id                BigInt?   @db.UnsignedBigInt
  name                   String    @db.VarChar(255)
  secret                 String?   @db.VarChar(100)
  provider               String?   @db.VarChar(255)
  redirect               String    @db.Text
  personal_access_client Boolean
  password_client        Boolean
  revoked                Boolean
  created_at             DateTime? @db.Timestamp(0)
  updated_at             DateTime? @db.Timestamp(0)

  @@index([user_id], map: "oauth_clients_user_id_index")
}

model oauth_personal_access_clients {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  client_id  BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model oauth_refresh_tokens {
  id              String    @id @db.VarChar(100)
  access_token_id String    @db.VarChar(100)
  revoked         Boolean
  expires_at      DateTime? @db.DateTime(0)

  @@index([access_token_id], map: "oauth_refresh_tokens_access_token_id_index")
}

model orders {
  id                   Int     @id @default(autoincrement())
  employer_id          Int
  number_of_candidates Int
  cost                 Decimal @db.Decimal(10, 0)
  status               Int
  payment_type         String  @db.VarChar(200)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model password_resets {
  email      String    @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model permissions {
  id                    BigInt                  @id @default(autoincrement()) @db.UnsignedBigInt
  name                  String                  @db.VarChar(255)
  guard_name            String                  @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  model_has_permissions model_has_permissions[]
  role_has_permissions  role_has_permissions[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model post_tag {
  post_id BigInt @db.UnsignedBigInt
  tag_id  BigInt @db.UnsignedBigInt
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_tag_post_id_foreign")
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "post_tag_tag_id_foreign")

  @@index([post_id], map: "post_tag_post_id_foreign")
  @@index([tag_id], map: "post_tag_tag_id_foreign")
  @@ignore
}

model posts {
  id              BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  account_id      BigInt
  user_id         BigInt?     @db.UnsignedBigInt
  category_id     BigInt?     @db.UnsignedBigInt
  sub_category_id BigInt      @db.UnsignedBigInt
  title           String      @db.VarChar(255)
  slug            String      @db.VarChar(355)
  excerpt         String?     @db.LongText
  description     String?     @db.LongText
  published       Int         @default(1) @db.TinyInt
  metadata        String?     @db.LongText
  created_at      DateTime?   @db.Timestamp(0)
  updated_at      DateTime?   @db.Timestamp(0)
  deleted_at      DateTime?   @db.Timestamp(0)
  post_tag        post_tag[]  @ignore
  categories      categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "posts_category_id_foreign")
  users           users?      @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "posts_user_id_foreign")

  @@index([account_id], map: "account_id_posts")
  @@index([category_id], map: "posts_category_id_foreign")
  @@index([user_id], map: "posts_user_id_foreign")
  @@index([sub_category_id], map: "sub_category_id_posts")
}

model profiles {
  id                  BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  user_id             BigInt    @db.UnsignedBigInt
  specialism_id       String    @db.LongText
  experiences_id      BigInt    @db.UnsignedBigInt
  education_levels_id BigInt    @db.UnsignedBigInt
  job_title           String?   @db.LongText
  personal_statement  String?   @db.Text
  personal            String?   @db.LongText
  biography           String?   @db.LongText
  education           String?   @db.LongText
  experience          String?   @db.LongText
  portfolio           String?   @db.LongText
  skills              String?   @db.LongText
  honors              String?   @db.LongText
  availability_status Int
  metadata            String?   @db.LongText
  created_at          DateTime? @db.Timestamp(0)
  updated_at          DateTime? @db.Timestamp(0)
  deleted_at          DateTime? @db.Timestamp(0)
  users               users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "profiles_user_id_foreign")

  @@index([education_levels_id], map: "education_profiles_index")
  @@index([experiences_id], map: "experience_profiles_index")
  @@index([user_id], map: "profiles_user_id_index")
}

model role_has_permissions {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   BigInt                 @id @default(autoincrement()) @db.UnsignedBigInt
  name                 String                 @db.VarChar(255)
  guard_name           String                 @db.VarChar(255)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  model_has_roles      model_has_roles[]
  role_has_permissions role_has_permissions[]
}

model specialisms {
  id                 BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  specialty          String    @db.LongText
  type               String    @db.Text
  specific_specialty String    @db.LongText
  created_at         DateTime? @db.Timestamp(0)
  updated_at         DateTime? @db.Timestamp(0)
  deleted_at         DateTime? @db.Timestamp(0)
}

model specialities {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  specialities_name String    @db.Char(200)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model sub_categories {
  id          BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  account_id  BigInt    @db.UnsignedBigInt
  user_id     BigInt    @db.UnsignedBigInt
  category_id BigInt    @db.UnsignedBigInt
  name        String    @db.LongText
  slug        String    @db.LongText
  description String?   @db.LongText
  metadata    String?   @db.LongText
  created_at  DateTime  @default(now()) @db.Timestamp(0)
  updated_at  DateTime  @default(now()) @db.Timestamp(0)
  deleted_at  DateTime? @db.Timestamp(0)

  @@index([account_id], map: "sub_category_account")
  @@index([category_id], map: "sub_category_category")
  @@index([user_id], map: "sub_category_user")
}

model tags {
  id         BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  account_id BigInt
  title      String     @db.VarChar(255)
  created_at DateTime?  @db.Timestamp(0)
  updated_at DateTime?  @db.Timestamp(0)
  deleted_at DateTime?  @db.Timestamp(0)
  post_tag   post_tag[] @ignore

  @@index([account_id], map: "acount_id_tags")
}

model users {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  account_id        BigInt              @db.UnsignedBigInt
  first_name        String?             @db.VarChar(25)
  last_name         String?             @db.VarChar(25)
  username          String?             @db.VarChar(25)
  email             String              @unique(map: "users_email_unique") @db.VarChar(50)
  phone             String?             @db.VarChar(25)
  password          String?             @db.VarChar(255)
  company           String?             @db.VarChar(50)
  description       String?             @db.LongText
  type              String?             @db.VarChar(50)
  experience        Int?
  industry          Int?
  provider          String?             @db.VarChar(255)
  provider_id       String?             @db.VarChar(255)
  metadata          String?             @db.LongText
  owner             Boolean             @default(false)
  remember_token    String?             @db.VarChar(100)
  email_verified_at DateTime?           @db.Timestamp(0)
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  deleted_at        DateTime?           @db.Timestamp(0)
  employer_profiles employer_profiles[]
  posts             posts[]
  profiles          profiles[]
  accounts          accounts            @relation(fields: [account_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_account_id_foreign")

  @@index([account_id], map: "users_account_id_index")
}
